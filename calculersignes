#!/bin/bash
#BENCHEIKH Sabrina et BOUAZIZ Mohammed Amine
#Cette commande affiche pour chaque personne d'un fichier donnée en parametre, son signe zodiacal.

function aide ()
# affiche l'aide de la commande (si $1 = "--help")
{
	echo "usage : calculersignes affiche pour chaque personne d'un fichier son signe zodiacal "
	echo "verifie que les parametres de la date sont des entier"
	echo "verifier que les dates sont valides"
	echo "verifier que le parametre entré est un fichier text"
	echo "exemple: calculersignes fichier.txt"
	return 0
}

function isnum ()
#fonction qui renvoie 0 (vrai) quand l'argument qui lui est passé en paramètre est un nombre (positif ou négatif), 1 sinon
{
   if [[ "$1" =~ ^[-+]?[0-9]+$ ]]; then
   	return 0
   	else
        return 1
   fi
}

function estbissextile ()
#fonction qui envoie 0 (Vrai) si l'année (l'argument passé en parametre)  est bissextille, 1 sinon 
{

  if ([ `expr $3 % 400` -eq 0 ]) | ([ `expr $3 % 4` -eq 0 ] && [ `expr $3 % 100` -ne 0 ]);then 
  
	return 0 
	else
	return 1 

  fi 
 
}

function dateval ()
#fonction qui renvoie 0 si la date est valide , 1 sinon (dans le cas ou $1 (le jours) ne serait pas dans l'interval exigé à savoir >0 et <jourmax du mois en question)
#Vu qu'on a listé tous les cas possible si les parametre ne se trouve dans aucun des cas possibles on renverra à la fin 1 ce qui equivaut à faux.
# On rajoutera pour cette commande la fonction est bissextile qu'on utilisera pour le mois de fevrier afin de determiner le nombre de max de jours de ce mois selon l'année entrée en parametre.
#On a définie le nombre de jour maximal des mois dans des catégoris et on a listé les 12 mois de l'année. Dans le cas ou le mois entré ne correspond à aucune des possibilité on reverra 1, ce qui equivaut à faux.
{
case "$2" in
  
 "1" | "3" | "5" | "7"| "8" | "10" | "12" | "01"| "03" | "05" | "07" | "08") 

   if [ $1 -gt 31 ] || [ $1 -le 0 ];then
   	return 1
   	else 
   	return 0
   fi
   ;;

 
  "4" | "6" | "9" | "11" | "04" | "06" | "09" )      
   if [ $1 -gt 30 ] || [ $1 -le 0 ];then
   	return 1
  	else 
   	return 0
   fi
   ;;
 
  "2" | "02" )  
      
   if estbissextile $*; then 

    	if [ $1 -gt 29 ] || [ $1 -le 0 ];then
   	return 1
   	else 
   	return 0
   	fi
   else
   	if [ $1 -gt 28 ] || [ $1 -le 0 ];then
   	return 1
   	else 
   	return 0
   	fi
   fi
   ;;

* )
return 1
;;

esac
}

#Programme principal
if [ $# -eq 0 ]; then					#On vérifis la présence des parametres souhaités
echo "pas de parametres!" >&2
aide

elif [ $1 = "--help" ]; then				#On affiche l'aide si le parametre entré est --help
aide
 
elif [ ! -f $1 ] ; then					#On vérifis que le parametre entré est bien un fichier
echo "Ce fichier est introuvable" >&2
aide

else							#Si tout est bon on executera les instruction suivantes:

	while read line 
	do 
		ligne=$line				    
		if [[ ${ligne:0:1} != "#" ]] ; then   		# On ignore les lignes commençant par #
		nom=$(echo $ligne | cut -d ":" -f1)		# On décompose la ligne pour définir chacun des parametres de la commande "affichersigne"
		prenom=$(echo $ligne | cut -d ":" -f2)
		date=$(echo $ligne | cut -d ":" -f3)
		j=$(echo $date | cut -d- -f1)		# On décompose la date pour verifier sa validité afin de ne calculer les signes que de celles qui son valides
		m=$(echo $date | cut -d- -f2)
		a=$(echo $date | cut -d- -f3)
 		
			if ! isnum $j $m $a || ! dateval "$j" "$m" "$a"; then 	# On vérifie la validité de la date avec les parametres stockés dans les variables $j $m $a
			echo -e "\e[0;31m$nom:$prenom:$date n'est pas valable \e[0m" >&2        # On affichera en rouge les date non valides
                        else 
				echo `bash affichersigne $nom $prenom $date`	# On appel la commande affichersigne avec ses parametres dont les dates valides.
			fi 
		fi
	done < "$1"
fi



